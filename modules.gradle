/** modules.gradle是ABKit插件提供的能力, 如果您喜欢这种组件管理方式,可以到https://github.com/luqinx/abkit了解他 **/
/** ABKit管理模块的方式和Gradle本身的模块管理方式完全兼容, 接入的话不用担心改造成本 **/

include ':app'
include ':tests:remoteexample',   //module.gradle兼容settings.gradle的api
        ':tests:testremoteapi'
include ':autoservice'

name("sp") //首先定义名称，每个模块直接依赖这个名称即可 --> implementation servicepool
        .remote("chao.java.tools:sp:1.5.5") // 定义远程aar, 即使其他组件或aar包依赖了其他的版本的sp, sp最终的版本号一定会是这里指定的版本号
        .project(':servicepool')    //定义project
//        .include() //include表示使用project, 不调用include表示使用remote远程仓库对应的aar
//        .disabled() //禁用这个模块， 在这里禁用，引用servicepool的模块不需要在dependencies里将"implementation servicepool"删除
//        .enabledByProperty("p1")   // 通过gradle.properties, local.properties等属性文件中的属性是否为true|1来启用一个组件
//        .disabledByProperty("p2")  // 通过gradle.properties, local.properties等属性文件中的属性是否为true|1来禁用一个组件

name("spa")
        .remote("chao.android.tools:spa:1.5.6")
        .project(':servicepool_android')
//        .include()

name("sprpc")
        .remote("chao.android.tools:sprpc:1.5.5")
        .project(":sprpc")
        .include()

name("sprouter")
    .remote("chao.android.tools:sprouter:1.5.11")
    .project(":sprouter")
    .include()



name("A").project(":tests:applib1").include()
name("B").project(":tests:applib2").include()
name("pool").project(":tests:pool").include()
name("appservice").project(":tests:appservice").include()
name("testpluginlib").project(":tests:testpluginlib").include()
name("pool").project(":tests:pool").include()



name("ami").remote("chao.android.tools:ami:1.0.2")
name("interceptor").remote("chao.android.tools:interceptor:0.0.3")
name("guava").remote("com.google.guava:guava:19.0")
name("gson").remote("com.google.code.gson:gson:2.8.5")
